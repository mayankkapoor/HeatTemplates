heat_template_version: 2016-10-14
description: >
  creating lamp stack linux, apache mysql and php
parameters:
  sg_type:
    type: string
    default: default

  key:
    type: string
    description: >
      Name of a KeyPair to enable SSH access to the instance. Note that the
      default user is ec2-user.
    default: mykey

  flavor:
    type: string
    description: Instance type for the docker server.
    default: m1.tiny

  public_net:
    type: string
    description: name of public network for which floating IP addresses will be allocated.
    default: non-prod2

  availabilityZone:
    type: string
    default: nova
  vmAvailabilityZone:
    type: string
    default: JMNG-PE3-NONPROD

  internalNet:
    type: string
    description: internal network name
  internalSubnet:
    type: string
    description: internal subnet name
  securityGroup:
    type: string
    description: security group name

  volumeName:
    type: string
    description: name of the bootable volume

  serverName:
    type: string
    description: name of the instance

  volumeSize:
    type: number
    default: 10
  bootImage:
    type: string
    default: Ubuntu1604
  proxy_ip:
    type: string
    default: http://10.144.106.132:8678
  istelegrafon:
    type: string
    default: restart
  isprodvm:
    type: string
    default: non-prod
  commandLog:
    type: boolean
    default: false

conditions:
  custom: {equals: [{get_param: sg_type}, "custom"]}
  default: {equals: [{get_param: sg_type}, "default"]}

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: securityGroup }
      description: Default security group created by JAWS console
      rules: [ {"direction": egress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 1,
              "port_range_max": 65535,
              "ethertype": IPv4,
              "protocol": tcp},
             {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 22,
              "port_range_max": 22,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 80,
              "port_range_max": 80,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 443,
              "port_range_max": 443,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 3306,
              "port_range_max": 3306,
              "ethertype": IPv4,
              "protocol": tcp}

            ]
    condition: default


  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: internalNet }
      fixed_ips:
        - subnet_id: { get_param: internalSubnet  }
      security_groups:
        - { if: ["custom", { get_param: securityGroup }, { get_resource: security_group } ] }


  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: serverName }
      availability_zone: { get_param: vmAvailabilityZone }
      key_name: { get_param: key }
      flavor: { get_param: flavor}
      networks:
        - port: { get_resource: server_port }
      block_device_mapping_v2:
        - device_name: vda
          volume_id: { get_resource: bootable_volume }
          delete_on_termination: True
      user_data:
       str_replace:
        template: |
          #!/bin/bash -v
          sudo -i
          echo "127.0.1.1 $serverName" >> /etc/hosts
          rm -rf /var/lib/apt/lists/lock
          export http_proxy=$proxy
          export https_proxy=$proxy
          # export no_proxy=127.0.0.1,localhost,10,192.168,.jio.com
          echo "export http_proxy=$proxy" >> /etc/profile.d/proxy.sh
          echo "export https_proxy=$proxy" >> /etc/profile.d/proxy.sh
          # echo "export no_proxy=127.0.0.1,localhost,10,192.168,.jio.com" >> /etc/profile.d/proxy.sh

          ##### Update sources.list based on bootImage
          if [ $bootImage = "Ubuntu1604" ]
          then
            echo  > /etc/apt/sources.list
            echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse"  >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse" >> /etc/apt/sources.list
            echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse"  >> /etc/apt/sources.list
          elif [ $bootImage = "Ubuntu1804" ]
          then
            echo  > /etc/apt/sources.list
            echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse"  >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse" >> /etc/apt/sources.list
            echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
            echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse"  >> /etc/apt/sources.list
          else
            echo "sources.list was not updated based on bootImage"
          fi

          ##### Telegraf agent  install
          curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf_1.10.3-1_amd64.deb
          dpkg -i telegraf_1.10.3-1_amd64.deb
          apt-get update -y
          apt-get install libtool-bin -y
          apt-get install jq -y

          ################snoopy install
          if [ $commandLog = True ]
          then
            rm -f snoopy-install.sh
            curl -L -o snoopy-install.sh https://github.com/a2o/snoopy/raw/install/doc/install/bin/snoopy-install.sh
            chmod 755 snoopy-install.sh
            ./snoopy-install.sh git-master
            chmod -R 755 /var/log/auth.log
            snoopy-enable
          else
            echo "snoopy not installed"
          fi

          ##### Telegraf configurations download
          echo "serverid=$(sudo curl GET  -s 'http://169.254.169.254/openstack/latest/meta_data.json' |jq -r '.uuid' )" >> /etc/default/telegraf
          mv /etc/telegraf/telegraf.conf /etc/telegraf/telegraf-orig.conf
          if [ $isprodvm = "non-prod" ]
          then
            curl -o /etc/telegraf/telegraf.conf https://raw.githubusercontent.com/mayankkapoor/statuscheck/master/telegraf_nonprod.conf
          else
            curl -o /etc/telegraf/telegraf.conf https://raw.githubusercontent.com/mayankkapoor/statuscheck/master/telegraf_prod.conf
          fi
          curl -o /etc/telegraf/longrunning.sh https://raw.githubusercontent.com/mayankkapoor/statuscheck/master/longrunning.sh
          curl -o /etc/telegraf/commands.sh https://raw.githubusercontent.com/mayankkapoor/statuscheck/master/commands.sh
          service telegraf $istelegrafon

          #### stack installation
          debconf-set-selections <<< "mysql-server mysql-server/root_password password 'root'"
          debconf-set-selections <<< "mysql-server mysql-server/root_password_again password 'root'"
          export DEBIAN_FRONTEND="noninteractive"
          apt-get install -y mysql-server
          service mysql restart
          apt-get install apache2 -y
          apt-get install php libapache2-mod-php php-mcrypt php-mysql -y

        params:
            $proxy: { get_param: proxy_ip }
            $istelegrafon : { get_param: istelegrafon }
            $bootImage: { get_param: bootImage }
            $isprodvm: { get_param: isprodvm }
            $commandLog : { get_param: commandLog }
            $serverName: { get_param: serverName }

  server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_net}

  associate_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: server_floating_ip}
      server_id: { get_resource: server}

  bootable_volume:
    type: OS::Cinder::Volume
    properties:
      name: { get_param: volumeName }
      size: { get_param: volumeSize }
      availability_zone: { get_param: availabilityZone }
      image: { get_param: bootImage }



outputs:
  network:
    description: ip address of vm
    value: { get_attr: [ server, networks ] }
