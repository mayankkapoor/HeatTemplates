heat_template_version: 2013-05-23
description: >
  Create a simple VM using Heat
parameters:
  key:
    type: string
    description: >
      Name of a KeyPair to enable SSH access to the instance.
    default: mykey

  flavor:
    type: string
    description: Instance type for the docker server.
    default: m1.tiny

  public_net:
    type: string
    description: name of public network for which floating IP addresses will be allocated.
    default: non-prod2

  availabilityZone:
    type: string
    default: nova

  vmAvailabilityZone:
    type: string
    default: JMNG-PE3-NONPROD

  internalNet:
    type: string
    description: internal network name
  internalSubnet:
    type: string
    description: internal subnet name
  securityGroup:
    type: string
    description: security group name

  volumeName:
    type: string
    description: name of the bootable volume

  serverName:
    type: string
    description: name of the instance

  volumeSize:
    type: number
    default: 10
  bootImage:
    type: string
    default: Ubuntu1604
  proxy_ip:
    type: string
    default: http://10.157.240.254:8678
  istelegrafon:
    type: string
    default: restart

resources:
  security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: { get_param: securityGroup }
      rules: [
             {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 22,
              "port_range_max": 22,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 80,
              "port_range_max": 80,
              "ethertype": IPv4,
              "protocol": tcp},
              {"direction": ingress,
              "remote_ip_prefix": 0.0.0.0/0,
              "port_range_min": 443,
              "port_range_max": 443,
              "ethertype": IPv4,
              "protocol": tcp}

            ]

  server_port:
    type: OS::Neutron::Port
    properties:
      network_id: { get_param: internalNet }
      fixed_ips:
        - subnet_id: { get_param: internalSubnet  }
      security_groups:
        - { get_resource: security_group }


  server:
    type: OS::Nova::Server
    properties:
      name: { get_param: serverName }
      availability_zone: { get_param: vmAvailabilityZone }
      key_name: { get_param: key }
      flavor: { get_param: flavor}
      networks:
        - port: { get_resource: server_port }
      block_device_mapping_v2:
        - device_name: vda
          volume_id: { get_resource: bootable_volume }
          delete_on_termination: True



      user_data:
        str_replace:
          template: |
            #!/bin/bash -v
            sudo hostname localhost
            echo "sudo hostnamectl set-hostname localhost" >> ~/.profile
            sudo -i
            rm /var/lib/apt/lists/lock
            export http_proxy=$proxy
            export https_proxy=$proxy
            echo "export http_proxy=$proxy" >> /etc/profile.d/proxy.sh
            echo "export https_proxy=$proxy" >> /etc/profile.d/proxy.sh

            # Update sources.list based on bootImage
            if [ $bootImage = "Ubuntu1604" ]
            then
              echo  > /etc/apt/sources.list
              echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse"  >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial main restricted universe multiverse" >> /etc/apt/sources.list
              echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-security main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ xenial-updates main restricted universe multiverse"  >> /etc/apt/sources.list
            elif [ $bootImage = "Ubuntu1804" ]
            then
              echo  > /etc/apt/sources.list
              echo "###### Ubuntu Main Repos" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse"  >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic main restricted universe multiverse" >> /etc/apt/sources.list
              echo "###### Ubuntu Update Repos" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-security main restricted universe multiverse" >> /etc/apt/sources.list
              echo "deb-src http://in.archive.ubuntu.com/ubuntu/ bionic-updates main restricted universe multiverse"  >> /etc/apt/sources.list
            else
              echo "sources.list was not updated based on bootImage"
            fi

            # Telegraf agent install
            if [ $bootImage = "Ubuntu1604" ] || [ $bootImage = "Ubuntu1804" ]
            then
              curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf_1.10.3-1_amd64.deb
              dpkg -i telegraf_1.10.3-1_amd64.deb
            elif [ $bootImage = "Centos-7.5" ] || [ $bootImage = "RHEL-7.5" ]
            then
              curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf-1.10.3-1.x86_64.rpm
              yum localinstall telegraf-1.10.3-1.x86_64.rpm -y
            else
              echo "Unknown image, assuming debian OS"
              curl -L -O https://dl.influxdata.com/telegraf/releases/telegraf_1.10.3-1_amd64.deb
              dpkg -i telegraf_1.10.3-1_amd64.deb
            fi
            # Telegraf agent config
            curl -L -o jq https://github.com/stedolan/jq/releases/download/jq-1.6/jq-linux64
            chmod +x ./jq
            mv jq /usr/bin
            echo "serverid=$(sudo curl GET  -s 'http://169.254.169.254/openstack/latest/meta_data.json' |jq -r '.uuid' )" >> /etc/default/telegraf
            mv /etc/telegraf/telegraf.conf /etc/telegraf/telegraf-orig.conf
            curl -o /etc/telegraf/telegraf.conf https://raw.githubusercontent.com/Rahul-Aanand/statuscheck/prod/telegraf.conf
            curl -o /etc/telegraf/longrunning.sh https://raw.githubusercontent.com/Rahul-Aanand/statuscheck/prod/longrunning.sh
            service telegraf $istelegrafon

          params:
            $proxy: { get_param: proxy_ip }
            $istelegrafon : { get_param: istelegrafon }
            $bootImage: { get_param: bootImage }

  server_floating_ip:
    type: OS::Nova::FloatingIP
    properties:
      pool: { get_param: public_net}

  associate_floating_ip:
    type: OS::Nova::FloatingIPAssociation
    properties:
      floating_ip: { get_resource: server_floating_ip}
      server_id: { get_resource: server}

  bootable_volume:
    type: OS::Cinder::Volume
    properties:
      name: { get_param: volumeName }
      size: { get_param: volumeSize }
      availability_zone: { get_param: availabilityZone }
      image: { get_param: bootImage }



outputs:
  network:
    description: ip address of vm
    value: { get_attr: [ server, networks ] }
